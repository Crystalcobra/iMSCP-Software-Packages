#!/usr/bin/perl
# i-MSCP a internet Multi Server Control Panel
#
# Copyright (C) 2010 by internet Multi Server Control Panel - http://i-mscp.net
#
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is "i-MSCP a internet Multi Server Control Panel".
#
# The Initial Developer of the Original Code is ispCP Team.
# Portions created by Initial Developer are Copyright (C) 2010 by
# i-MSCP a internet Multi Server Control Panel. All Rights Reserved.
#
# The i-MSCP Home Page is:
#
#    http://i-mscp.net
#

use Digest::MD5 qw(md5_hex);

use strict;
use warnings;

################################################################################
#
# Load configuration from i-MSCP configuration file
#
# @return int 0 on success, negative int otherwise
#
sub getConf {
	my $file;
	if(-e '/usr/local/etc/imscp/imscp.conf'){
		$file = '/usr/local/etc/imscp/imscp.conf';
	} elsif(-e '/etc/imscp/imscp.conf') {
		$file = '/etc/imscp/imscp.conf';
	} else {
		return -1;
	}
	return -1 if ! open F, '<', $file;
	%main::cfg = join('', <F>) =~ /^\s*(\w+)\s*=\s*(.*)$/gm;
	close F;
	%main::cfg ? 0 : 1;
}

my ($sw_database_pass_clear, $sw_database_pass_md5, $sw_install_pass_clear, $sw_install_pass_md5, $sql, $url_path, $DBname, $hostname, $dbUser, $dbPassword);
my ($processing_type,$sw_software_db,$sw_software_prefix,$sw_database,$sw_database_user,$sw_database_tmp_pwd,$sw_install_username,$sw_install_password,$sw_install_email,$domain_name,$sw_dest_path,$sw_path);

sub extract_variables {
	my $crypted_array = shift;
	my $uncrypted_array = decode_base64($crypted_array);
	($processing_type,$sw_software_db,$sw_software_prefix,$sw_database,$sw_database_user,$sw_database_tmp_pwd,$sw_install_username,$sw_install_password,$sw_install_email,$domain_name,$sw_dest_path,$sw_path)=split(/,/, $uncrypted_array);
	if($processing_type && $sw_software_prefix && $sw_database && $sw_database_user && $sw_database_tmp_pwd && $sw_install_username && $sw_install_password && $sw_install_email && $domain_name && $sw_dest_path && $sw_path) {
		if ($sw_database ne "not_required") {
			$sw_database_pass_clear = $sw_database_tmp_pwd;
			$sw_database_pass_md5 = md5_hex($sw_database_pass_clear);
			#New database connection to the user database
			imscp_installer_set_new_db_connection($sw_database,$sw_database_user,$sw_database_pass_clear);
		} else {
			$sw_database_pass_clear = $sw_database_tmp_pwd;
			$sw_database_pass_md5 = $sw_database_tmp_pwd;
		}
		$sw_install_pass_clear = $sw_install_password;
		$sw_install_pass_md5 = md5_hex($sw_install_pass_clear);
	} else {
		print "[DEGUB] i-MSCP installer file - Some variables not defined in the uncrytped string\n";
		exit();
	}
}

sub imscp_installer_set_new_db_connection {
	@main::db_connect = undef;
	$DBname = shift;
	$dbUser = shift;
	$dbPassword = shift;
	$hostname = 'localhost';
	@main::db_connect = ("DBI:mysql:$DBname:$hostname", $dbUser, $dbPassword);
}

sub imscp_installer_package_start {
	if($processing_type eq "install") {
		print "[DEGUB] i-MSCP installer file - installation process start\n";
	} elsif ($processing_type eq "uninstall") {
		print "[DEGUB] i-MSCP installer file - uninstallation process start\n";
	}
}

sub imscp_installer_package_end {
	if($processing_type eq "install") {
		print "[DEGUB] i-MSCP installer file - installation process end\n";
	} elsif ($processing_type eq "uninstall") {
		print "[DEGUB] i-MSCP installer file - uninstallation process end\n";
	}
	setup_main_vars();
}

if(getConf() != 0) {
	print "[DEGUB] i-MSCP installer file - Can't load imscp.conf\n";
} else {
	#
	# Do not make changes to this static vars
	#
	
	sub get_inc_path {
		if(getConf() != 0) {
			print "[DEGUB] i-MSCP installer file - Can't load imscp.conf\n";
		} else {
			my $imscp_path = $main::cfg{'ROOT_DIR'}.'/engine';
		}
	}
	use lib get_inc_path();
	require 'imscp_common_code.pl';
	
	my $crypted_array = $ARGV[0];
	if ($crypted_array) {
		extract_variables("$crypted_array");
		my $db_tables = "sql_tables";
		$url_path = $sw_path;
		$url_path =~ s/^\/.*htdocs//g;

		#
		# This is the place for dynamic vars
		#
		
		my $config_file = "sites/default/settings.php";
		my $table_users = "users";
		my $new_table_users = $sw_software_prefix.$table_users;
		my $table_variable = "variable";
		my $new_table_variable = $sw_software_prefix.$table_variable;
		my $sw_dest_path_without_htdocs = $sw_dest_path;
		$sw_dest_path_without_htdocs =~ s/\/htdocs//g;
		
		if($processing_type eq "install") {
			## Don't remove this line below ##
			imscp_installer_package_start(); 
			##################################
			
			my $configfile_entry = "<?php
#created by i-MSCP application installer

/**
 * Database configuration format:
 * \@code
 *   \$databases['default']['default'] = array(
 *     'driver' => 'mysql',
 *     'database' => 'databasename',
 *     'username' => 'username',
 *     'password' => 'password',
 *     'host' => 'localhost',
 *     'prefix' => '',
 *   );
 *   \$databases['default']['default'] = array(
 *     'driver' => 'pgsql',
 *     'database' => 'databasename',
 *     'username' => 'username',
 *     'password' => 'password',
 *     'host' => 'localhost',
 *     'prefix' => '',
 *   );
 *   \$databases['default']['default'] = array(
 *     'driver' => 'sqlite',
 *     'database' => '/path/to/databasefilename',
 *   );
 * \@endcode
 */

\$databases = array (
  'default' => 
  array (
    'default' => 
    array (
      'database' => '$sw_database',
      'username' => '$sw_database_user',
      'password' => '$sw_database_pass_clear',
      'host' => 'localhost',
      'port' => '',
      'driver' => 'mysql',
      'prefix' => '$sw_software_prefix',
    ),
  ),
);

/**
 * Access control for update.php script.
 *
 * If you are updating your Drupal installation using the update.php script but
 * are not logged in using either an account with the \"Administer software
 * updates\" permission or the site maintenance account (the account that was
 * created during installation), you will need to modify the access check
 * statement below. Change the FALSE to a TRUE to disable the access check.
 * After finishing the upgrade, be sure to open this file again and change the
 * TRUE back to a FALSE!
 */
\$update_free_access = FALSE;

/** Salt for one-time login links and cancel links, form tokens, etc.
 *
 * This variable will be set to a random value by the installer. All one-time
 * login links will be invalidated if the value is changed.  Note that this
 * variable must have the same value on every web server.  If this variable is
 * empty, a hash of the serialized database credentials will be used as a
 * fallback salt.
 *
 * For enhanced security, you may set this variable to a value using the
 * contents of a file outside your docroot that is never saved together
 * with any backups of your Drupal files and database.
 *
 * Example:
 *   \$drupal_hash_salt = file_get_contents('/home/example/salt.txt');
 *
 */
\$drupal_hash_salt = 'HwbWY_Po6zSiFFsTeElsUsm9cBWfZo0HSivLGQ2o97Y';

ini_set('session.gc_probability', 1);
ini_set('session.gc_divisor', 100);
ini_set('session.gc_maxlifetime', 200000);
ini_set('session.cookie_lifetime', 2000000);
# ini_set('pcre.backtrack_limit', 200000);
# ini_set('pcre.recursion_limit', 200000);
# \$cookie_domain = '.example.com';
# \$conf['site_name'] = 'My Drupal site';
# \$conf['theme_default'] = 'garland';
# \$conf['anonymous'] = 'Visitor';
# \$conf['maintenance_theme'] = 'bartik';
# \$conf['reverse_proxy'] = TRUE;
# \$conf['reverse_proxy_addresses'] = array('a.b.c.d', ...);
# \$conf['reverse_proxy_header'] = 'HTTP_X_CLUSTER_CLIENT_IP';
# \$conf['omit_vary_cookie'] = TRUE;
# \$conf['css_gzip_compression'] = FALSE;
# \$conf['js_gzip_compression'] = FALSE;
# \$conf['locale_custom_strings_en'][''] = array(
#   'forum'      => 'Discussion board',
#   '\@count min' => '\@count minutes',
# );
# \$conf['blocked_ips'] = array(
#   'a.b.c.d',
# );
\$conf['404_fast_paths_exclude'] = '/\/(?:styles)\//';
\$conf['404_fast_paths'] = '/\.(?:txt|png|gif|jpe?g|css|js|ico|swf|flv|cgi|bat|pl|dll|exe|asp)\$/i';
\$conf['404_fast_html'] = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL \"\@path\" was not found on this server.</p></body></html>';
# drupal_fast_404();
# \$conf['allow_authorize_operations'] = FALSE;";

			open(CONFIGFILE,'>'.$sw_dest_path.'/'.$config_file);
			print CONFIGFILE "$configfile_entry";
			close CONFIGFILE;

			#Dump import
			sys_command("mysql -u".$sw_database_user." -p".$sw_database_pass_clear." ".$sw_database." < ./sql/sql.sql");

			#Rename SQL-Tables
			open(SQL_TABLES,'<'.$db_tables) or die("Unable to open file: ".$db_tables);
			my @sql_table_data = <SQL_TABLES>;
			chomp (@sql_table_data);
			close(SQL_TABLES);
			foreach my $sql_table_data_line (@sql_table_data) {
				$sql = "
					RENAME TABLE
						`".$sql_table_data_line."`
					TO 
						`".$sw_software_prefix.$sql_table_data_line."`
					;
				";
				doSQL($sql);
			}

			#Update Datebase with variables
			$sql = "
				UPDATE
					`".$new_table_users."`
				SET
					`mail` = '".$sw_install_email."',
					`init` = '".$sw_install_email."',
					`pass` = '".$sw_install_pass_md5."',
					`created` = UNIX_TIMESTAMP(),
					`access` = UNIX_TIMESTAMP(),
					`login` = UNIX_TIMESTAMP(),
					`name` = '".$sw_install_username."'
					
				WHERE
					`name` = 'admin'
				;
			";
			doSQL($sql);
			$sql = "
				UPDATE
					`".$new_table_variable."`
				SET
					`value` = 's:50:\"".$sw_dest_path_without_htdocs."/phptmp/\";'
					
				WHERE
					`name` = 'file_temporary_path'
				;
			";
			doSQL($sql);
			$sql = "
				UPDATE
					`".$new_table_variable."`
				SET
					`created` = 'i:".time().";'
					
				WHERE
					`name` = 'install_time'
				;
			";
			doSQL($sql);
			$sql = "
				UPDATE
					`".$new_table_variable."`
				SET
					`value` = 's:18:\"webmaster\@".$domain_name."\";'
					
				WHERE
					`name` = 'site_mail'
				;
			";
			doSQL($sql);
			$sql = "
				UPDATE
					`".$new_table_variable."`
				SET
					`value` = 's:29:\"".$domain_name."\";'
					
				WHERE
					`name` = 'site_name'
				;
			";
			doSQL($sql);
			$sql = "
				UPDATE
					`".$new_table_variable."`
				SET
					`value` = 'a:1:{i:0;s:18:\"webmaster\@".$domain_name."\";}'
					
				WHERE
					`name` = 'update_notify_emails'
				;
			";
			doSQL($sql);
			$sql = "
				UPDATE
					`".$new_table_variable."`
				SET
					`created` = 'i:".time().";'
					
				WHERE
					`name` = 'update_last_check'
				;
			";
			doSQL($sql);
			
			## Don't remove this line below ##
			imscp_installer_package_end();
			##################################
		} elsif ($processing_type eq "uninstall") {
			## Don't remove this line below ##
			imscp_installer_package_start(); 
			##################################

			#Drop existing SQL-Tables
			open(SQL_TABLES,'<'.$db_tables) or die("Unable to open file: ".$db_tables);
			my @sql_table_data = <SQL_TABLES>;
			chomp (@sql_table_data);
			close(SQL_TABLES);
			foreach my $sql_table_data_line (@sql_table_data) {
				$sql = "
					DROP TABLE IF EXISTS
						`".$sw_software_prefix.$sql_table_data_line."`
					;
				";
				doSQL($sql);
			}
			
			## Don't remove this line below ##
			imscp_installer_package_end();
			##################################
		}
	} else {
		print "[DEGUB] i-MSCP installer file - No Input Data available\n";
	}	
}
